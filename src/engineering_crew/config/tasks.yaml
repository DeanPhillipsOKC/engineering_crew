design_task:
  description: >
    Take the high level requirements described here and prepare a detailed design for the engineer;
    everything should be in 1 python module, but outline the classes and methods in the module.
    
    Here are the requirements: 
    {requirements}

    The module should be named {module_name} and the class should be named {class_name}
    IMPORTANT: Only output the design in markdown format, laying out in detail the classes and functions in the module, describing the functionality.
  expected_output: >
    A detailed design for the engineer, identifying the classes and functions in the module.
  agent: engineering_lead
  output_file: output/{module_name}_design.md

code_task:
  description: >
    Write a python module that implements the design described by the engineering lead, in order to achieve the requirements.
    
    The python module must be completely self-contained, and ready so that it can 
    be tested or have a simple UI built for it. The module should be named 
    {module_name}.py and the class should be named {class_name}

    Here are the requirements: 
    {requirements}
  expected_output: >
    A python module that implements the design and achieves the requirements.
    IMPORTANT: Output ONLY the raw Python code without any markdown formatting, code block delimiters, or backticks.
    The output should be valid Python code that can be directly saved to a file and executed.
  agent: backend_engineer
  context:
    - design_task
  output_file: output/src/{module_name}.py

frontend_task:
  description: >
    Write a Streamlit UI in a module app.py that demonstrates the given backend class in {module_name}.
    Assume there is only 1 user, and keep the UI very simple indeed - just a prototype or demo.
    
    Here are the requirements: 
    {requirements}

    IMPORTANT:
    - Always add a named key to each UI element so that they can be referred to
      by name when testing the UI.
  expected_output: >
    A Streamlit UI in module app.py that demonstrates the given backend class.
    The file should be ready so that it can be run as-is, in the same directory as the backend module, and it should import the backend class from {module_name}.
    IMPORTANT: Output ONLY the raw Python code without any markdown formatting, code block delimiters, or backticks.
    The output should be valid Python code that can be directly saved to a file and executed.
  agent: frontend_engineer
  output_file: output/src/app.py

test_task:
  description: >
    Write unit tests for the given backend module {module_name} and create a test_{module_name} in the same directory as the backend module.
  expected_output: >
    A test_{module_name} module that tests the given backend module.
    IMPORTANT: Output ONLY the raw Python code without any markdown formatting, code block delimiters, or backticks.
    The output should be valid Python code that can be directly saved to a file and executed.
  agent: test_engineer
  context:
    - code_task
  output_file: output/src/test_{module_name}.py

streamlit_test_task:
  description: >
    Write a test for the StreamLit UI using the StreamLit native testing framework 
    AppTest.  The test should focus on the contents of output/src/app.py

    IMPORTANT:
    - Always refer to the UI elements by their named keys rather than by index.
      if they do not have a key, add one.
  expected_output: >
    A test for the StreamLit UI using the StreamLit native testing framework 
    AppTest.
    IMPORTANT: Output ONLY the raw Python code without any markdown formatting, 
    code block delimiters, or backticks. The output should be valid Python code 
    that can be directly saved to a file and executed
  output_file: output/src/test_app.py
  agent: streamlit_tester