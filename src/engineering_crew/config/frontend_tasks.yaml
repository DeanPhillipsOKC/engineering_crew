frontend_task:
  description: >
    Write a streamlit UI in a module app.py that demonstrates the given backend 
    class in {module_name} which can be found in output/src/{module_name}.py.
    Assume there is only 1 user, and keep the UI very simple indeed - just a prototype or demo.
    Here are the requirements: {requirements}

    IMPORTANT: Only use the backend entry point module 
    output/src/{module_name}.py and the streamlit library. It is the entry point so there should
    be no need to examine the other modules.
  expected_output: >
    A streamlit UI in module app.py that demonstrates the given backend class.
    The file should be ready so that it can be run as-is, in the same directory
     as the backend module, and it should import the backend class from 
     {module_name}.

    IMPORTANT: Output ONLY the raw Python code without any markdown formatting, 
    code block delimiters, or backticks. The output should be valid Python code 
    that can be directly saved to a file and executed.
  agent: frontend_engineer
  output_file: output/src/app.py

create_dockerfile_task:
  description: >
    Write a Dockerfile that runs the streamlit UI in a container. The Dockerfile 
    should be in the same directory as the streamlit UI module 
    output/src/app.py.

    The dockerfile should install the dependencies in the requirements.txt file

    The dockerfile should have a line to copy all .py files from the current 
    directory to the container.  for example...
    COPY *.py .
  expected_output: >
    A Dockerfile that runs the streamlit UI in a container. The Dockerfile 
    should be in the same directory as the streamlit UI module 
    output/src/app.py.
  agent: devops_engineer
  output_file: output/src/Dockerfile

create_bash_run_script_task:
  description: >
    Write a BASH shell script that runs the streamlit UI in a container. The shell 
    script should be in the same directory as the Dockerfile.

    The shell script should build the docker image and run it, and it should be 
    executable.
  expected_output: >
    A shell script that runs the streamlit UI in a container. The shell 
    script should be in the same directory as the Dockerfile.
  agent: scripter
  output_file: output/src/run.sh

create_powershsell_run_script_task:
  description: >
    Write a PowerShell script that runs the streamlit UI in a container. The shell 
    script should be in the same directory as the Dockerfile.

    The shell script should build the docker image and run it, and it should be 
    executable.

    IMPORTANT:
    - Never forget to use the curly braces for HostPort and ContainerPort.  This 
    is a common mistake.

  expected_output: >
    A PowerShell script that runs the streamlit UI in a container. The shell 
    script should be in the same directory as the Dockerfile.
  agent: scripter
  output_file: output/src/run.ps1

create_bash_run_test_script_task:
  description: >
    Write a BASH shell script that runs the unit tests in a container. The shell 
    script should be in the same directory as the Dockerfile.

    The shell script should build the docker image and run it, and it should be 
    executable.
  expected_output: >
    A shell script that runs the unit tests in a container. The shell 
    script should be in the same directory as the Dockerfile.
  agent: scripter
  output_file: output/src/run_tests.sh

create_powershell_run_test_script_task:
  description: >
    Write a PowerShell script that runs the unit tests in a container. The shell 
    script should be in the same directory as the Dockerfile.

    The shell script should build the docker image and run it, and it should be 
    executable.
  expected_output: >
    A PowerShell script that runs the unit tests in a container. The shell 
    script should be in the same directory as the Dockerfile.
  agent: scripter
  output_file: output/src/run_tests.ps1

review_ux_task:
  description: >
    Review the streamlit UI in output/src/app.py and make suggestions for improvement.
    
    Here are the requirements: 
    {requirements}
  expected_output: >
    A review of the streamlit UI and suggestions for improvement.
  agent: ux_expert
  output_file: output/ux_review.txt

implement_ux_suggestions_task:
  description: >
    Implement the suggestions for improvement in the streamlit UI in 
    output/src/app.py.
  expected_output: >
    A streamlit UI in module app.py that demonstrates the given backend class.
    The file should be ready so that it can be run as-is, in the same directory
     as the backend module, and it should import the backend class from 
     {module_name}.

    IMPORTANT: Output ONLY the raw Python code without any markdown formatting, 
    code block delimiters, or backticks. The output should be valid Python code 
    that can be directly saved to a file and executed.
  agent: frontend_engineer
  output_file: output/src/app.py
  context:
    - review_ux_task